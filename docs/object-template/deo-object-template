Post request 1: Send Employeed id to check if it exists in temp db.
    post request object:
        {
            employeeId: "test-employee-id"
        }
    expected success response object:
        {
            httpStats: 201,
            salutations: [],
            maritalStatuses: [],
            categories: [],
            employeeTypes: [],
            designations: [],
            departments: [],
            naturesOfEmployment: [],
            payBands: [],
            gradePays: [],
            states: [],
            relationship: []
        }
    failure response object: If employee id already exist in temp db.
        {
            httpStatus: 400,
            errorMessage: "e.g. Employee id already exist"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }

post request 2: Send employee basic details
    post request object:
        {
            employeeId: "test-employee-id",
            personalDetails: {
                salutation: "",
                firstName: "",
                middleName: "",
                lastName: "",
                maritalStatus: "",
                dob: "",
                placeOfBirth: "",
                gender: "",
                physicallyChallenged: "",
                kashmiriImmigrant: "",
                fatherName: "",
                motherName: "",
                category: "",
                nationality: "",
                religion: "",
                photograph: null,
                signature: null
            },
            employmentDetails: {
                employeeType: "",
                dateOfJoining: "",
                designation: "",
                department: "",
                researchInterest: "",
                natureOfEmployment: "",
                dateOfRetirement: ""
            },
            salaryDetails: {
                payBand: "",
                gradePay: "",
                basicPay: ""
            },
            addressDetails: {
                presentAddressDetails: {
                    addressLine1: "",
                    addressLine2: "",
                    city: "",
                    state: "Choose...",
                    pincode: "",
                    country: "",
                    contact: ""
                },
                permanentAddressDetails: {
                    addressLine1: "",
                    addressLine2: "",
                    city: "",
                    state: "Choose...",
                    pincode: "",
                    country: "",
                    contact: ""
                }
            },
            otherDetails: {
                hobbies: "",
                favoritePastTime: "",
                fax: "",
                officeNo: "",
                email: "",
                mobileNo: ""
            },
            bankDetails: {
                bankName: "",
                accountNumber: ""
            }
        }
    expected success response object:
        {
            httpStats: 201
        }
    failure response object: If some required attribute is not present in the request object.
        {
            httpStatus: 400,
            errorMessage: "e.g. Missing required attribute"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }

post request 3: send previous employment details
    post request object:
        {
            employeeId: "",
            previousEmploymentDetails: [
                {
                    fullAddressOfEmployer: "",
                    from: "",
                    to: "",
                    positionHeld: "",
                    payScale: "",
                    remarks: ""
                }
            ]
        }
    expected success response:
        {
            httpStatus: 201
        }
    failure response object: If some required attribute is not present in the request object.
        {
            httpStatus: 400,
            errorMessage: "e.g. Missing required attribute"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }

post request 4: send last 5 years stay details
    post request object:
        {
            employeeId: "",
            previousStayDetails: [
                {
                    residentialAddress: "",
                    from: "",
                    to: "",
                    nameOfDistrictHeadquarters: ""
                }
            ]
        }
    expected success response:
        {
            httpStatus: 201
        }
    failure response object: If some required attribute is not present in the request object.
        {
            httpStatus: 400,
            errorMessage: "e.g. Missing required attribute"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }

post request 5: send educational qualifications
    post request object:
        {
            employeeId: "",
            educationalQualifications: [
                {
                    examination: "",
                    college: "",
                    course: "",
                    year: "",
                    grade: "",
                    division: ""
                }
            ]
        }
    expected success response:
        {
            httpStatus: 201
        }
    failure response object: If some required attribute is not present in the request object.
        {
            httpStatus: 400,
            errorMessage: "e.g. Missing required attribute"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }

post request 6: send dependent family members details
    post request object:
        {
            employeeId: "",
            dependentFamilyMembers: [
                {
                    name: "",
                    relationship: "",
                    dob: "",
                    profession: "",
                    activeOrInactive: "",
                    presentPostalAddress: "",
                    photograph: null
                }
            ]
        }
    expected success response:
        {
            httpStatus: 201
        }
    failure response object: If some required attribute is not present in the request object.
        {
            httpStatus: 400,
            errorMessage: "e.g. Missing required attribute"
        }
    error response object: Service error e.g. any exception created at back-end.
        {
            httpStatus: 500,
            errorMessage: "e.g. Service Unavailable"
        }
    
